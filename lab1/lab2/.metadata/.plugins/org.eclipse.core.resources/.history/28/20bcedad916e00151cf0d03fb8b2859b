
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <string>
#include "systemc.h"
#include <fstream>
#include <bitset>
#include "memory.h"
using namespace std;

void memory::entry() {
	if (address.read() > addr_last.read()) {
		SC_REPORT_ERROR ( "","out of range memory size");
	} else {
		if (ce.read() == 1) {
			cout << "ce:1@" << sc_time_stamp () << endl;
			if(we.read() == 1) {
			//	mem_temp[address.read()] = data.read();  //write into memory
				string buf;
				buf = data.read().to_string(SC_HEX, true);
				// ------------ Data stored as Integers in RAM ------------
				mem_temp[address.read()] = to_string(strtoul(buf.substr(3, 5).c_str(), NULL, 16)); // Convert hex to Int

			} else {
				char *a = (char *)mem_temp[address.read()].c_str();
				data.write(atoi(a));
			//	data.write(mem_temp[address.read()]); //read from memory //to_int?
			}
		} else {
			cout << "ce=0:@" << sc_time_stamp () << endl;
			if(we.read() == 1) {NULL;}  //write nothing into memory
			else {data.write ( 0xFF );}
		}
	}
}

void memory::memread() {
	ifstream ifs(in_name,ifstream::in);
//	ifstream ifs("/home/parallels/Documents/workspace/lab2/ lab2_memory_component/T1.txt");
	int faddr = 0;
	string fdata = "";

	while (!ifs.eof()) {
		ifs >> faddr >> fdata;
		cout << " I am in the loop eof" <<endl;
		if (faddr >= MEMSIZE)
			break;
	//	mem_temp[faddr] = fdata;
		//format
	mem_temp[faddr] = to_string(strtoul(fdata.c_str(), NULL, 16));
		cout << dec << faddr << "\t"<< mem_temp[faddr] << endl;
	}
	addr_last.write(faddr - 1);
	ifs.close();
}

void memory::memwrite() {
	ofstream myfile("/home/parallels/Documents/workspace/lab2/ lab2_memory_component/T4", ofstream::out);
	for (int i = 0; i < MEMSIZE; i ++) {
		myfile << dec << i  << "  " << hex << mem_temp[i] << endl;
		cout << "success" << endl;
	}
	myfile.close();
}
